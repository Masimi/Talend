package routines;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class ValidaEmail {

    /**
     * ValidaEmail: retorna somente o email válido.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {parametro_} string("email") input: email a ser validado.
     * 
     * {example} helloExemple("world") # hello world !.
     */
    public static String GetEmail(String email) {
        if ((email == null) || (email.trim().length() <= 5)) {
        	email = null;
        	
        }
        else{
        	//Lista de provedores inválidos
            if ((email.indexOf("naotem") != -1)|| (email.indexOf("@@") != -1)||
            		(email.indexOf("@_@") != -1)|| (email.indexOf(",") != -1)||
            		(email.indexOf("@.") != -1)|| (email.indexOf("@naotem.com.br") != -1)||
            		(email.indexOf("@sem.com") != -1)|| (email.indexOf("@sem(email.com") != -1)||
            		(email.indexOf("nao@informado.com") != -1)|| (email.indexOf("@sem.com.br") != -1)||
            		(email.indexOf("nao@tem.com") != -1)|| (email.indexOf("@naoinformado.com.br") != -1)||
            		(email.indexOf("@.nenhum") != -1)|| (email.indexOf("naoinformado@") != -1)||
            		(email.indexOf("+") != -1)|| (email.indexOf("?") != -1)||
            		(email.indexOf("naotem@") != -1)|| (email.indexOf("naopossue") != -1)||
            		(email.indexOf("naopossui") != -1)|| (email.indexOf("xxxx@") != -1)||
            		(email.indexOf("@xxx") != -1)            		
            		)
            {
            	email = null;
            }
            else {
            	String emailPattern = "\\b(^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@([A-Za-z0-9-])+(\\.[A-Za-z0-9-]+)*((\\.[A-Za-z0-9]{2,})|(\\.[A-Za-z0-9]{2,}\\.[A-Za-z0-9]{2,}))$)\\b";
            	Pattern pattern = Pattern.compile(emailPattern, Pattern.CASE_INSENSITIVE);
            	Matcher matcher = pattern.matcher(email);
            	if (matcher.matches()== false){
            		email = null;
            	}
            }
        }
        return email;
    }
    
    
}
